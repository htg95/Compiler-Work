Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.


    Report from: Interprocedural optimizations [ipo]

  WHOLE PROGRAM (SAFE) [EITHER METHOD]: false
  WHOLE PROGRAM (SEEN) [TABLE METHOD]: true
  WHOLE PROGRAM (READ) [OBJECT READER METHOD]: false

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 0 (user-specified)
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000

In the inlining report below:
   "sz" refers to the "size" of the routine. The smaller a routine's size,
      the more likely it is to be inlined.
   "isz" refers to the "inlined size" of the routine. This is the amount
      the calling routine will grow if the called routine is inlined into it.
      The compiler generally limits the amount a routine can grow by having
      routines inlined into it.

Begin optimization report for: main()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (main()) [1/1=100.0%] /home/mdl/hut95/Benchmark_non_tiled_1024/floyd_1024_malloc_non_pluto_init_comment.c(63,1)
  -> EXTERN: (78,2) printf(const char *__restrict__, ...)
  -> EXTERN: (80,33) malloc(size_t)
  -> EXTERN: (81,33) memalign(unsigned long long, unsigned long long)
  -> EXTERN: (86,1) printf(const char *__restrict__, ...)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/mdl/hut95/Benchmark_non_tiled_1024/floyd_1024_malloc_non_pluto_init_comment.c(82,2)
<Multiversioned v1>
   remark #25228: Loop multiversioned for Data Dependence
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between pathDistanceMatrix line 84 and pathDistanceMatrix line 84
   remark #15346: vector dependence: assumed ANTI dependence between pathDistanceMatrix line 84 and pathDistanceMatrix line 84
   remark #25438: unrolled without remainder by 2  
LOOP END

LOOP BEGIN at /home/mdl/hut95/Benchmark_non_tiled_1024/floyd_1024_malloc_non_pluto_init_comment.c(82,2)
<Multiversioned v2>
   remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
   remark #25438: unrolled without remainder by 2  
LOOP END

LOOP BEGIN at /home/mdl/hut95/Benchmark_non_tiled_1024/floyd_1024_malloc_non_pluto_init_comment.c(96,5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between pathDistanceMatrix line 102 and pathDistanceMatrix line 102
   remark #15346: vector dependence: assumed OUTPUT dependence between pathDistanceMatrix line 102 and pathDistanceMatrix line 102

   LOOP BEGIN at /home/mdl/hut95/Benchmark_non_tiled_1024/floyd_1024_malloc_non_pluto_init_comment.c(98,9)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between pathDistanceMatrix line 102 and pathDistanceMatrix line 102
      remark #15346: vector dependence: assumed OUTPUT dependence between pathDistanceMatrix line 102 and pathDistanceMatrix line 102

      LOOP BEGIN at /home/mdl/hut95/Benchmark_non_tiled_1024/floyd_1024_malloc_non_pluto_init_comment.c(100,13)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed FLOW dependence between pathDistanceMatrix line 102 and pathDistanceMatrix line 102
         remark #15346: vector dependence: assumed ANTI dependence between pathDistanceMatrix line 102 and pathDistanceMatrix line 102
         remark #25438: unrolled without remainder by 2  
      LOOP END
   LOOP END
LOOP END
===========================================================================
