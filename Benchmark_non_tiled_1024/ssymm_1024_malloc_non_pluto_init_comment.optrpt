Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.


    Report from: Interprocedural optimizations [ipo]

  WHOLE PROGRAM (SAFE) [EITHER METHOD]: false
  WHOLE PROGRAM (SEEN) [TABLE METHOD]: true
  WHOLE PROGRAM (READ) [OBJECT READER METHOD]: false

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 0 (user-specified)
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000

In the inlining report below:
   "sz" refers to the "size" of the routine. The smaller a routine's size,
      the more likely it is to be inlined.
   "isz" refers to the "inlined size" of the routine. This is the amount
      the calling routine will grow if the called routine is inlined into it.
      The compiler generally limits the amount a routine can grow by having
      routines inlined into it.

Begin optimization report for: main()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (main()) [1/1=100.0%] /home/mdl/hut95/Benchmark_non_tiled_1024/ssymm_1024_malloc_non_pluto_init_comment.c(32,1)
  -> EXTERN: (41,1) printf(const char *__restrict__, ...)
  -> EXTERN: (44,15) malloc(size_t)
  -> EXTERN: (45,15) memalign(unsigned long long, unsigned long long)
  -> EXTERN: (51,15) malloc(size_t)
  -> EXTERN: (52,15) memalign(unsigned long long, unsigned long long)
  -> EXTERN: (68,16) malloc(size_t)
  -> EXTERN: (69,15) memalign(unsigned long long, unsigned long long)
  -> EXTERN: (75,1) printf(const char *__restrict__, ...)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/mdl/hut95/Benchmark_non_tiled_1024/ssymm_1024_malloc_non_pluto_init_comment.c(46,1)
<Multiversioned v1>
   remark #25228: Loop multiversioned for Data Dependence
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between a line 48 and a line 48
   remark #15346: vector dependence: assumed ANTI dependence between a line 48 and a line 48
   remark #25438: unrolled without remainder by 2  
LOOP END

LOOP BEGIN at /home/mdl/hut95/Benchmark_non_tiled_1024/ssymm_1024_malloc_non_pluto_init_comment.c(46,1)
<Multiversioned v2>
   remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
   remark #25438: unrolled without remainder by 2  
LOOP END

LOOP BEGIN at /home/mdl/hut95/Benchmark_non_tiled_1024/ssymm_1024_malloc_non_pluto_init_comment.c(53,1)
<Multiversioned v1>
   remark #25228: Loop multiversioned for Data Dependence
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between b line 55 and b line 55
   remark #15346: vector dependence: assumed ANTI dependence between b line 55 and b line 55
   remark #25438: unrolled without remainder by 2  
LOOP END

LOOP BEGIN at /home/mdl/hut95/Benchmark_non_tiled_1024/ssymm_1024_malloc_non_pluto_init_comment.c(53,1)
<Multiversioned v2>
   remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
   remark #25438: unrolled without remainder by 2  
LOOP END

LOOP BEGIN at /home/mdl/hut95/Benchmark_non_tiled_1024/ssymm_1024_malloc_non_pluto_init_comment.c(70,1)
<Multiversioned v1>
   remark #25228: Loop multiversioned for Data Dependence
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between c line 72 and c line 72
   remark #15346: vector dependence: assumed ANTI dependence between c line 72 and c line 72
   remark #25438: unrolled without remainder by 2  
LOOP END

LOOP BEGIN at /home/mdl/hut95/Benchmark_non_tiled_1024/ssymm_1024_malloc_non_pluto_init_comment.c(70,1)
<Multiversioned v2>
   remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
   remark #25438: unrolled without remainder by 2  
LOOP END

LOOP BEGIN at /home/mdl/hut95/Benchmark_non_tiled_1024/ssymm_1024_malloc_non_pluto_init_comment.c(88,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between c line 91 and c line 94
   remark #15346: vector dependence: assumed OUTPUT dependence between c line 94 and c line 91

   LOOP BEGIN at /home/mdl/hut95/Benchmark_non_tiled_1024/ssymm_1024_malloc_non_pluto_init_comment.c(89,5)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between c line 91 and c line 94
      remark #15346: vector dependence: assumed OUTPUT dependence between c line 94 and c line 91

      LOOP BEGIN at /home/mdl/hut95/Benchmark_non_tiled_1024/ssymm_1024_malloc_non_pluto_init_comment.c(90,7)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed OUTPUT dependence between c line 91 and c line 92
         remark #15346: vector dependence: assumed OUTPUT dependence between c line 92 and c line 91
         remark #25439: unrolled with remainder by 2  
      LOOP END

      LOOP BEGIN at /home/mdl/hut95/Benchmark_non_tiled_1024/ssymm_1024_malloc_non_pluto_init_comment.c(90,7)
      <Remainder>
      LOOP END
   LOOP END
LOOP END
===========================================================================
