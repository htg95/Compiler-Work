Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.


    Report from: Interprocedural optimizations [ipo]

  WHOLE PROGRAM (SAFE) [EITHER METHOD]: false
  WHOLE PROGRAM (SEEN) [TABLE METHOD]: true
  WHOLE PROGRAM (READ) [OBJECT READER METHOD]: false

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 0 (user-specified)
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000

In the inlining report below:
   "sz" refers to the "size" of the routine. The smaller a routine's size,
      the more likely it is to be inlined.
   "isz" refers to the "inlined size" of the routine. This is the amount
      the calling routine will grow if the called routine is inlined into it.
      The compiler generally limits the amount a routine can grow by having
      routines inlined into it.

Begin optimization report for: main(int, char **)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (main(int, char **)) [1/1=100.0%] covcol_8192_32x32_malloc_pluto_init_comment.c(70,1)
  -> EXTERN: (90,1) printf(const char *__restrict__, ...)
  -> EXTERN: (92,18) malloc(size_t)
  -> EXTERN: (93,18) memalign(size_t, size_t)
  -> EXTERN: (99,20) malloc(size_t)
  -> EXTERN: (100,20) memalign(size_t, size_t)
  -> EXTERN: (106,1) printf(const char *__restrict__, ...)
  -> EXTERN: (137,19) floor(double)
  -> EXTERN: (137,19) floor(double)
  -> EXTERN: (138,22) floor(double)
  -> EXTERN: (138,22) floor(double)
  -> EXTERN: (139,23) floor(double)
  -> EXTERN: (139,23) floor(double)
  -> EXTERN: (155,17) floor(double)
  -> EXTERN: (155,17) floor(double)
  -> EXTERN: (156,20) floor(double)
  -> EXTERN: (156,20) floor(double)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at covcol_8192_32x32_malloc_pluto_init_comment.c(94,1)
<Multiversioned v1>
   remark #25228: Loop multiversioned for Data Dependence
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between data line 96 and data line 96
   remark #15346: vector dependence: assumed ANTI dependence between data line 96 and data line 96
   remark #25438: unrolled without remainder by 2  
LOOP END

LOOP BEGIN at covcol_8192_32x32_malloc_pluto_init_comment.c(94,1)
<Multiversioned v2>
   remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
   remark #25438: unrolled without remainder by 2  
LOOP END

LOOP BEGIN at covcol_8192_32x32_malloc_pluto_init_comment.c(101,1)
<Multiversioned v1>
   remark #25228: Loop multiversioned for Data Dependence
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between symmat line 103 and symmat line 103
   remark #15346: vector dependence: assumed ANTI dependence between symmat line 103 and symmat line 103
   remark #25438: unrolled without remainder by 2  
LOOP END

LOOP BEGIN at covcol_8192_32x32_malloc_pluto_init_comment.c(101,1)
<Multiversioned v2>
   remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
   remark #25438: unrolled without remainder by 2  
LOOP END

LOOP BEGIN at covcol_8192_32x32_malloc_pluto_init_comment.c(109,3)
<Distributed chunk1>
   remark #25426: Loop Distributed (3 way) 
   remark #25408: memset generated
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy
LOOP END

LOOP BEGIN at covcol_8192_32x32_malloc_pluto_init_comment.c(111,5)
<Distributed chunk2>
   remark #25444: Loopnest Interchanged: ( 1 2 ) --> ( 2 1 )
   remark #25440: unrolled and jammed by 2   (pre-vector) 
   remark #15542: loop was not vectorized: inner loop was already vectorized   [ covcol_8192_32x32_malloc_pluto_init_comment.c(111,5) ]

   LOOP BEGIN at covcol_8192_32x32_malloc_pluto_init_comment.c(109,3)
      remark #15388: vectorization support: reference mean has aligned access   [ covcol_8192_32x32_malloc_pluto_init_comment.c(112,7) ]
      remark #15388: vectorization support: reference mean has aligned access   [ covcol_8192_32x32_malloc_pluto_init_comment.c(112,7) ]
      remark #15389: vectorization support: reference data has unaligned access   [ covcol_8192_32x32_malloc_pluto_init_comment.c(112,7) ]
      remark #15388: vectorization support: reference mean has aligned access   [ covcol_8192_32x32_malloc_pluto_init_comment.c(112,7) ]
      remark #15388: vectorization support: reference mean has aligned access   [ covcol_8192_32x32_malloc_pluto_init_comment.c(112,7) ]
      remark #15389: vectorization support: reference data has unaligned access   [ covcol_8192_32x32_malloc_pluto_init_comment.c(112,7) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 4
      remark #15309: vectorization support: normalized vectorization overhead 0.088
      remark #15301: PERMUTED LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 2 
      remark #15450: unmasked unaligned unit stride loads: 2 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 21 
      remark #15477: vector loop cost: 8.500 
      remark #15478: estimated potential speedup: 2.460 
      remark #15488: --- end vector loop cost summary ---
      remark #25456: Number of Array Refs Scalar Replaced In Loop: 8
      remark #25015: Estimate of max trip count of loop=1023
   LOOP END

   LOOP BEGIN at covcol_8192_32x32_malloc_pluto_init_comment.c(109,3)
   <Remainder loop for vectorization>
      remark #15388: vectorization support: reference mean has aligned access   [ covcol_8192_32x32_malloc_pluto_init_comment.c(112,7) ]
      remark #15388: vectorization support: reference mean has aligned access   [ covcol_8192_32x32_malloc_pluto_init_comment.c(112,7) ]
      remark #15389: vectorization support: reference data has unaligned access   [ covcol_8192_32x32_malloc_pluto_init_comment.c(112,7) ]
      remark #15388: vectorization support: reference mean has aligned access   [ covcol_8192_32x32_malloc_pluto_init_comment.c(112,7) ]
      remark #15388: vectorization support: reference mean has aligned access   [ covcol_8192_32x32_malloc_pluto_init_comment.c(112,7) ]
      remark #15389: vectorization support: reference data has unaligned access   [ covcol_8192_32x32_malloc_pluto_init_comment.c(112,7) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 0.667
      remark #15301: REMAINDER LOOP WAS VECTORIZED
      remark #25456: Number of Array Refs Scalar Replaced In Loop: 2
      remark #25015: Estimate of max trip count of loop=3
   LOOP END

   LOOP BEGIN at covcol_8192_32x32_malloc_pluto_init_comment.c(109,3)
   <Peeled loop for vectorization>
      remark #25436: completely unrolled by 1  
   LOOP END
LOOP END

LOOP BEGIN at covcol_8192_32x32_malloc_pluto_init_comment.c(111,5)
<Remainder, Distributed chunk2>
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at covcol_8192_32x32_malloc_pluto_init_comment.c(109,3)
      remark #15388: vectorization support: reference mean has aligned access   [ covcol_8192_32x32_malloc_pluto_init_comment.c(112,7) ]
      remark #15388: vectorization support: reference mean has aligned access   [ covcol_8192_32x32_malloc_pluto_init_comment.c(112,7) ]
      remark #15389: vectorization support: reference data has unaligned access   [ covcol_8192_32x32_malloc_pluto_init_comment.c(112,7) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 4
      remark #15309: vectorization support: normalized vectorization overhead 0.083
      remark #15301: PERMUTED LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 11 
      remark #15477: vector loop cost: 4.500 
      remark #15478: estimated potential speedup: 2.440 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=1023
   LOOP END

   LOOP BEGIN at covcol_8192_32x32_malloc_pluto_init_comment.c(109,3)
   <Remainder loop for vectorization>
      remark #15388: vectorization support: reference mean has aligned access   [ covcol_8192_32x32_malloc_pluto_init_comment.c(112,7) ]
      remark #15388: vectorization support: reference mean has aligned access   [ covcol_8192_32x32_malloc_pluto_init_comment.c(112,7) ]
      remark #15389: vectorization support: reference data has unaligned access   [ covcol_8192_32x32_malloc_pluto_init_comment.c(112,7) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.083
      remark #15301: REMAINDER LOOP WAS VECTORIZED
      remark #25015: Estimate of max trip count of loop=3
   LOOP END

   LOOP BEGIN at covcol_8192_32x32_malloc_pluto_init_comment.c(109,3)
   <Peeled loop for vectorization>
      remark #25436: completely unrolled by 1  
   LOOP END
LOOP END

LOOP BEGIN at covcol_8192_32x32_malloc_pluto_init_comment.c(109,3)
<Peeled loop for vectorization, Distributed chunk3>
   remark #25436: completely unrolled by 1  
LOOP END

LOOP BEGIN at covcol_8192_32x32_malloc_pluto_init_comment.c(109,3)
<Distributed chunk3>
   remark #15388: vectorization support: reference mean has aligned access   [ covcol_8192_32x32_malloc_pluto_init_comment.c(113,5) ]
   remark #15388: vectorization support: reference mean has aligned access   [ covcol_8192_32x32_malloc_pluto_init_comment.c(113,5) ]
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 4
   remark #15301: PARTIAL LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 30 
   remark #15477: vector loop cost: 19.000 
   remark #15478: estimated potential speedup: 1.570 
   remark #15488: --- end vector loop cost summary ---
   remark #25015: Estimate of max trip count of loop=1023
LOOP END

LOOP BEGIN at covcol_8192_32x32_malloc_pluto_init_comment.c(109,3)
<Remainder loop for vectorization, Distributed chunk3>
   remark #15388: vectorization support: reference mean has aligned access   [ covcol_8192_32x32_malloc_pluto_init_comment.c(113,5) ]
   remark #15388: vectorization support: reference mean has aligned access   [ covcol_8192_32x32_malloc_pluto_init_comment.c(113,5) ]
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.256
   remark #15301: REMAINDER LOOP WAS VECTORIZED
   remark #25015: Estimate of max trip count of loop=3
LOOP END

LOOP BEGIN at covcol_8192_32x32_malloc_pluto_init_comment.c(117,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between data line 119 and data line 119
   remark #15346: vector dependence: assumed OUTPUT dependence between data line 119 and data line 119

   LOOP BEGIN at covcol_8192_32x32_malloc_pluto_init_comment.c(118,5)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between data line 119 and data line 119
      remark #15346: vector dependence: assumed ANTI dependence between data line 119 and data line 119
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at covcol_8192_32x32_malloc_pluto_init_comment.c(118,5)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at covcol_8192_32x32_malloc_pluto_init_comment.c(121,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at covcol_8192_32x32_malloc_pluto_init_comment.c(122,5)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at covcol_8192_32x32_malloc_pluto_init_comment.c(122,5)
      remark #15388: vectorization support: reference symmat has aligned access   [ covcol_8192_32x32_malloc_pluto_init_comment.c(123,7) ]
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 4
      remark #15309: vectorization support: normalized vectorization overhead 1.417
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 8 
      remark #15477: vector loop cost: 1.500 
      remark #15478: estimated potential speedup: 5.270 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at covcol_8192_32x32_malloc_pluto_init_comment.c(122,5)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference symmat has unaligned access   [ covcol_8192_32x32_malloc_pluto_init_comment.c(123,7) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.857
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at covcol_8192_32x32_malloc_pluto_init_comment.c(122,5)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at covcol_8192_32x32_malloc_pluto_init_comment.c(137,19)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at covcol_8192_32x32_malloc_pluto_init_comment.c(138,22)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at covcol_8192_32x32_malloc_pluto_init_comment.c(139,23)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at covcol_8192_32x32_malloc_pluto_init_comment.c(140,11)
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at covcol_8192_32x32_malloc_pluto_init_comment.c(141,13)
               remark #15542: loop was not vectorized: inner loop was already vectorized

               LOOP BEGIN at covcol_8192_32x32_malloc_pluto_init_comment.c(146,15)
               <Peeled loop for vectorization>
               LOOP END

               LOOP BEGIN at covcol_8192_32x32_malloc_pluto_init_comment.c(146,15)
                  remark #15388: vectorization support: reference symmat has aligned access   [ covcol_8192_32x32_malloc_pluto_init_comment.c(147,17) ]
                  remark #15389: vectorization support: reference symmat has unaligned access   [ covcol_8192_32x32_malloc_pluto_init_comment.c(147,17) ]
                  remark #15389: vectorization support: reference data has unaligned access   [ covcol_8192_32x32_malloc_pluto_init_comment.c(147,17) ]
                  remark #15381: vectorization support: unaligned access used inside loop body
                  remark #15305: vectorization support: vector length 2
                  remark #15399: vectorization support: unroll factor set to 4
                  remark #15309: vectorization support: normalized vectorization overhead 0.675
                  remark #15300: LOOP WAS VECTORIZED
                  remark #15442: entire loop may be executed in remainder
                  remark #15449: unmasked aligned unit stride stores: 1 
                  remark #15450: unmasked unaligned unit stride loads: 2 
                  remark #15475: --- begin vector loop cost summary ---
                  remark #15476: scalar loop cost: 27 
                  remark #15477: vector loop cost: 5.000 
                  remark #15478: estimated potential speedup: 5.010 
                  remark #15488: --- end vector loop cost summary ---
               LOOP END

               LOOP BEGIN at covcol_8192_32x32_malloc_pluto_init_comment.c(146,15)
               <Remainder loop for vectorization>
                  remark #15389: vectorization support: reference symmat has unaligned access   [ covcol_8192_32x32_malloc_pluto_init_comment.c(147,17) ]
                  remark #15389: vectorization support: reference symmat has unaligned access   [ covcol_8192_32x32_malloc_pluto_init_comment.c(147,17) ]
                  remark #15389: vectorization support: reference data has unaligned access   [ covcol_8192_32x32_malloc_pluto_init_comment.c(147,17) ]
                  remark #15381: vectorization support: unaligned access used inside loop body
                  remark #15305: vectorization support: vector length 2
                  remark #15309: vectorization support: normalized vectorization overhead 1.167
                  remark #15301: REMAINDER LOOP WAS VECTORIZED
               LOOP END

               LOOP BEGIN at covcol_8192_32x32_malloc_pluto_init_comment.c(146,15)
               <Remainder loop for vectorization>
               LOOP END
            LOOP END
         LOOP END
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at covcol_8192_32x32_malloc_pluto_init_comment.c(155,17)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at covcol_8192_32x32_malloc_pluto_init_comment.c(156,20)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at covcol_8192_32x32_malloc_pluto_init_comment.c(157,7)
         remark #25084: Preprocess Loopnests: Moving Out Store    [ covcol_8192_32x32_malloc_pluto_init_comment.c(158,9) ]
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at covcol_8192_32x32_malloc_pluto_init_comment.c(162,9)
         <Peeled loop for vectorization>
         LOOP END

         LOOP BEGIN at covcol_8192_32x32_malloc_pluto_init_comment.c(162,9)
            remark #15389: vectorization support: reference symmat has unaligned access   [ covcol_8192_32x32_malloc_pluto_init_comment.c(163,11) ]
            remark #15388: vectorization support: reference symmat has aligned access   [ covcol_8192_32x32_malloc_pluto_init_comment.c(163,11) ]
            remark #15381: vectorization support: unaligned access used inside loop body
            remark #15305: vectorization support: vector length 2
            remark #15399: vectorization support: unroll factor set to 4
            remark #15309: vectorization support: normalized vectorization overhead 0.500
            remark #15300: LOOP WAS VECTORIZED
            remark #15442: entire loop may be executed in remainder
            remark #15448: unmasked aligned unit stride loads: 1 
            remark #15450: unmasked unaligned unit stride loads: 1 
            remark #15459: masked indexed (or scatter) stores: 1 
            remark #15475: --- begin vector loop cost summary ---
            remark #15476: scalar loop cost: 13 
            remark #15477: vector loop cost: 6.000 
            remark #15478: estimated potential speedup: 2.100 
            remark #15488: --- end vector loop cost summary ---
         LOOP END

         LOOP BEGIN at covcol_8192_32x32_malloc_pluto_init_comment.c(162,9)
         <Remainder loop for vectorization>
            remark #15389: vectorization support: reference symmat has unaligned access   [ covcol_8192_32x32_malloc_pluto_init_comment.c(163,11) ]
            remark #15389: vectorization support: reference symmat has unaligned access   [ covcol_8192_32x32_malloc_pluto_init_comment.c(163,11) ]
            remark #15381: vectorization support: unaligned access used inside loop body
            remark #15305: vectorization support: vector length 2
            remark #15309: vectorization support: normalized vectorization overhead 1.059
            remark #15301: REMAINDER LOOP WAS VECTORIZED
         LOOP END

         LOOP BEGIN at covcol_8192_32x32_malloc_pluto_init_comment.c(162,9)
         <Remainder loop for vectorization>
         LOOP END
      LOOP END
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

covcol_8192_32x32_malloc_pluto_init_comment.c(110,5):remark #34026: call to memset implemented as a call to optimized library version
===========================================================================
