Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.


    Report from: Interprocedural optimizations [ipo]

  WHOLE PROGRAM (SAFE) [EITHER METHOD]: false
  WHOLE PROGRAM (SEEN) [TABLE METHOD]: false
  WHOLE PROGRAM (READ) [OBJECT READER METHOD]: false

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 0 (user-specified)
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000

In the inlining report below:
   "sz" refers to the "size" of the routine. The smaller a routine's size,
      the more likely it is to be inlined.
   "isz" refers to the "inlined size" of the routine. This is the amount
      the calling routine will grow if the called routine is inlined into it.
      The compiler generally limits the amount a routine can grow by having
      routines inlined into it.

Begin optimization report for: main()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (main()) [1/1=100.0%] jacobi-2d-imper_8192_32x32_malloc_pluto.c(66,1)
  -> EXTERN: (71,2) printf(const char *__restrict__, ...)
  -> EXTERN: (76,16) malloc(size_t)
  -> EXTERN: (77,16) memalign(size_t, size_t)
  -> EXTERN: (83,16) malloc(size_t)
  -> EXTERN: (84,16) memalign(size_t, size_t)
  -> EXTERN: (89,2) printf(const char *__restrict__, ...)
  -> EXTERN: (91,5) init_array()
  -> EXTERN: (104,17) floor(double)
  -> EXTERN: (104,17) floor(double)
  -> EXTERN: (105,22) floor(double)
  -> EXTERN: (105,22) floor(double)
  -> EXTERN: (105,22) floor(double)
  -> EXTERN: (105,22) floor(double)
  -> EXTERN: (106,15) ceil(double)
  -> EXTERN: (106,15) ceil(double)
  -> EXTERN: (106,50) floor(double)
  -> EXTERN: (106,50) floor(double)
  -> EXTERN: (106,50) floor(double)
  -> EXTERN: (106,50) floor(double)
  -> EXTERN: (106,50) floor(double)
  -> EXTERN: (106,50) floor(double)
  -> EXTERN: (106,50) floor(double)
  -> EXTERN: (106,50) floor(double)
  -> EXTERN: (106,50) floor(double)
  -> EXTERN: (106,50) floor(double)
  -> EXTERN: (107,20) floor(double)
  -> EXTERN: (114,20) floor(double)
  -> EXTERN: (128,19) ceil(double)
  -> EXTERN: (128,19) ceil(double)
  -> EXTERN: (128,53) floor(double)
  -> EXTERN: (128,53) floor(double)
  -> EXTERN: (128,53) floor(double)
  -> EXTERN: (128,53) floor(double)
  -> EXTERN: (128,53) floor(double)
  -> EXTERN: (128,53) floor(double)
  -> EXTERN: (128,53) floor(double)
  -> EXTERN: (128,53) floor(double)
  -> EXTERN: (141,17) ceil(double)
  -> EXTERN: (141,17) ceil(double)
  -> EXTERN: (141,17) ceil(double)
  -> EXTERN: (141,17) ceil(double)
  -> EXTERN: (141,17) ceil(double)
  -> EXTERN: (141,17) ceil(double)
  -> EXTERN: (141,17) ceil(double)
  -> EXTERN: (141,17) ceil(double)
  -> EXTERN: (141,76) floor(double)
  -> EXTERN: (141,76) floor(double)
  -> EXTERN: (141,76) floor(double)
  -> EXTERN: (141,76) floor(double)
  -> EXTERN: (141,76) floor(double)
  -> EXTERN: (141,76) floor(double)
  -> EXTERN: (141,76) floor(double)
  -> EXTERN: (141,76) floor(double)
  -> EXTERN: (150,17) ceil(double)
  -> EXTERN: (150,17) ceil(double)
  -> EXTERN: (150,17) ceil(double)
  -> EXTERN: (150,17) ceil(double)
  -> EXTERN: (150,17) ceil(double)
  -> EXTERN: (150,17) ceil(double)
  -> EXTERN: (150,17) ceil(double)
  -> EXTERN: (150,17) ceil(double)
  -> EXTERN: (150,76) floor(double)
  -> EXTERN: (150,76) floor(double)
  -> EXTERN: (150,76) floor(double)
  -> EXTERN: (150,76) floor(double)
  -> EXTERN: (150,76) floor(double)
  -> EXTERN: (150,76) floor(double)
  -> EXTERN: (150,76) floor(double)
  -> EXTERN: (150,76) floor(double)
  -> EXTERN: (161,17) ceil(double)
  -> EXTERN: (161,17) ceil(double)
  -> EXTERN: (161,17) ceil(double)
  -> EXTERN: (161,17) ceil(double)
  -> EXTERN: (161,17) ceil(double)
  -> EXTERN: (161,17) ceil(double)
  -> EXTERN: (161,17) ceil(double)
  -> EXTERN: (161,17) ceil(double)
  -> EXTERN: (170,42) floor(double)
  -> EXTERN: (170,42) floor(double)
  -> EXTERN: (170,42) floor(double)
  -> EXTERN: (170,42) floor(double)
  -> EXTERN: (188,19) ceil(double)
  -> EXTERN: (188,19) ceil(double)
  -> EXTERN: (188,19) ceil(double)
  -> EXTERN: (188,19) ceil(double)
  -> EXTERN: (201,17) ceil(double)
  -> EXTERN: (201,17) ceil(double)
  -> EXTERN: (201,17) ceil(double)
  -> EXTERN: (201,17) ceil(double)
  -> EXTERN: (201,64) floor(double)
  -> EXTERN: (201,64) floor(double)
  -> EXTERN: (201,64) floor(double)
  -> EXTERN: (201,64) floor(double)
  -> EXTERN: (201,64) floor(double)
  -> EXTERN: (201,64) floor(double)
  -> EXTERN: (201,64) floor(double)
  -> EXTERN: (201,64) floor(double)
  -> EXTERN: (201,64) floor(double)
  -> EXTERN: (201,64) floor(double)
  -> EXTERN: (201,64) floor(double)
  -> EXTERN: (201,64) floor(double)
  -> EXTERN: (201,64) floor(double)
  -> EXTERN: (201,64) floor(double)
  -> EXTERN: (201,64) floor(double)
  -> EXTERN: (201,64) floor(double)
  -> EXTERN: (213,17) ceil(double)
  -> EXTERN: (213,17) ceil(double)
  -> EXTERN: (213,17) ceil(double)
  -> EXTERN: (213,17) ceil(double)
  -> EXTERN: (224,17) ceil(double)
  -> EXTERN: (224,17) ceil(double)
  -> EXTERN: (224,17) ceil(double)
  -> EXTERN: (224,17) ceil(double)
  -> EXTERN: (224,64) floor(double)
  -> EXTERN: (224,64) floor(double)
  -> EXTERN: (224,64) floor(double)
  -> EXTERN: (224,64) floor(double)
  -> EXTERN: (224,64) floor(double)
  -> EXTERN: (224,64) floor(double)
  -> EXTERN: (224,64) floor(double)
  -> EXTERN: (224,64) floor(double)
  -> EXTERN: (224,64) floor(double)
  -> EXTERN: (224,64) floor(double)
  -> EXTERN: (224,64) floor(double)
  -> EXTERN: (224,64) floor(double)
  -> EXTERN: (224,64) floor(double)
  -> EXTERN: (224,64) floor(double)
  -> EXTERN: (224,64) floor(double)
  -> EXTERN: (224,64) floor(double)
  -> EXTERN: (236,17) ceil(double)
  -> EXTERN: (236,17) ceil(double)
  -> EXTERN: (236,17) ceil(double)
  -> EXTERN: (236,17) ceil(double)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at jacobi-2d-imper_8192_32x32_malloc_pluto.c(78,2)
<Multiversioned v1>
   remark #25228: Loop multiversioned for Data Dependence
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between a line 80 and a line 80
   remark #15346: vector dependence: assumed ANTI dependence between a line 80 and a line 80
   remark #25438: unrolled without remainder by 2  
LOOP END

LOOP BEGIN at jacobi-2d-imper_8192_32x32_malloc_pluto.c(78,2)
<Multiversioned v2>
   remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
   remark #25438: unrolled without remainder by 2  
LOOP END

LOOP BEGIN at jacobi-2d-imper_8192_32x32_malloc_pluto.c(85,2)
<Multiversioned v1>
   remark #25228: Loop multiversioned for Data Dependence
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between b line 87 and b line 87
   remark #15346: vector dependence: assumed ANTI dependence between b line 87 and b line 87
   remark #25438: unrolled without remainder by 2  
LOOP END

LOOP BEGIN at jacobi-2d-imper_8192_32x32_malloc_pluto.c(85,2)
<Multiversioned v2>
   remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
   remark #25438: unrolled without remainder by 2  
LOOP END

LOOP BEGIN at jacobi-2d-imper_8192_32x32_malloc_pluto.c(104,17)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at jacobi-2d-imper_8192_32x32_malloc_pluto.c(105,68)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at jacobi-2d-imper_8192_32x32_malloc_pluto.c(106,50)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at jacobi-2d-imper_8192_32x32_malloc_pluto.c(128,110)
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at jacobi-2d-imper_8192_32x32_malloc_pluto.c(129,13)
               remark #15344: loop was not vectorized: vector dependence prevents vectorization
               remark #15346: vector dependence: assumed FLOW dependence between b line 131 and b line 134
               remark #15346: vector dependence: assumed ANTI dependence between b line 134 and b line 131

               LOOP BEGIN at jacobi-2d-imper_8192_32x32_malloc_pluto.c(130,15)
                  remark #15344: loop was not vectorized: vector dependence prevents vectorization
                  remark #15346: vector dependence: assumed FLOW dependence between b line 131 and b line 132
                  remark #15346: vector dependence: assumed ANTI dependence between b line 132 and b line 131
               LOOP END
            LOOP END

            LOOP BEGIN at jacobi-2d-imper_8192_32x32_malloc_pluto.c(136,13)
               remark #25401: memcopy(with guard) generated
               remark #15542: loop was not vectorized: inner loop was already vectorized

               LOOP BEGIN at jacobi-2d-imper_8192_32x32_malloc_pluto.c(136,13)
               <Peeled loop for vectorization, Multiversioned v2>
               LOOP END

               LOOP BEGIN at jacobi-2d-imper_8192_32x32_malloc_pluto.c(136,13)
               <Multiversioned v2>
                  remark #15388: vectorization support: reference a has aligned access   [ jacobi-2d-imper_8192_32x32_malloc_pluto.c(137,15) ]
                  remark #15389: vectorization support: reference b has unaligned access   [ jacobi-2d-imper_8192_32x32_malloc_pluto.c(137,15) ]
                  remark #15381: vectorization support: unaligned access used inside loop body
                  remark #15305: vectorization support: vector length 2
                  remark #15309: vectorization support: normalized vectorization overhead 5.750
                  remark #15300: LOOP WAS VECTORIZED
                  remark #15442: entire loop may be executed in remainder
                  remark #15449: unmasked aligned unit stride stores: 1 
                  remark #15450: unmasked unaligned unit stride loads: 1 
                  remark #15475: --- begin vector loop cost summary ---
                  remark #15476: scalar loop cost: 17 
                  remark #15477: vector loop cost: 2.000 
                  remark #15478: estimated potential speedup: 7.810 
                  remark #15488: --- end vector loop cost summary ---
               LOOP END

               LOOP BEGIN at jacobi-2d-imper_8192_32x32_malloc_pluto.c(136,13)
               <Remainder loop for vectorization, Multiversioned v2>
               LOOP END
            LOOP END
         LOOP END

         LOOP BEGIN at jacobi-2d-imper_8192_32x32_malloc_pluto.c(141,133)
            remark #15522: loop was not vectorized: loop control flow is too complex. Try using canonical loop form

            LOOP BEGIN at jacobi-2d-imper_8192_32x32_malloc_pluto.c(142,11)
               remark #15344: loop was not vectorized: vector dependence prevents vectorization
               remark #15346: vector dependence: assumed FLOW dependence between b line 144 and b line 147
               remark #15346: vector dependence: assumed ANTI dependence between b line 147 and b line 144
               remark #25015: Estimate of max trip count of loop=32

               LOOP BEGIN at jacobi-2d-imper_8192_32x32_malloc_pluto.c(143,13)
                  remark #15344: loop was not vectorized: vector dependence prevents vectorization
                  remark #15346: vector dependence: assumed FLOW dependence between b line 144 and b line 145
                  remark #15346: vector dependence: assumed ANTI dependence between b line 145 and b line 144
               LOOP END
            LOOP END
         LOOP END

         LOOP BEGIN at jacobi-2d-imper_8192_32x32_malloc_pluto.c(150,133)
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at jacobi-2d-imper_8192_32x32_malloc_pluto.c(151,11)
               remark #15344: loop was not vectorized: vector dependence prevents vectorization
               remark #15346: vector dependence: assumed FLOW dependence between b line 153 and b line 154
               remark #15346: vector dependence: assumed ANTI dependence between b line 154 and b line 153

               LOOP BEGIN at jacobi-2d-imper_8192_32x32_malloc_pluto.c(152,13)
                  remark #15344: loop was not vectorized: vector dependence prevents vectorization
                  remark #15346: vector dependence: assumed FLOW dependence between b line 153 and b line 154
                  remark #15346: vector dependence: assumed ANTI dependence between b line 154 and b line 153
               LOOP END
            LOOP END

            LOOP BEGIN at jacobi-2d-imper_8192_32x32_malloc_pluto.c(157,11)
               remark #25401: memcopy(with guard) generated
               remark #15542: loop was not vectorized: inner loop was already vectorized

               LOOP BEGIN at jacobi-2d-imper_8192_32x32_malloc_pluto.c(157,11)
               <Multiversioned v2>
                  remark #15389: vectorization support: reference a has unaligned access   [ jacobi-2d-imper_8192_32x32_malloc_pluto.c(158,13) ]
                  remark #15389: vectorization support: reference b has unaligned access   [ jacobi-2d-imper_8192_32x32_malloc_pluto.c(158,13) ]
                  remark #15381: vectorization support: unaligned access used inside loop body
                  remark #15305: vectorization support: vector length 2
                  remark #15309: vectorization support: normalized vectorization overhead 1.000
                  remark #15300: LOOP WAS VECTORIZED
                  remark #15450: unmasked unaligned unit stride loads: 1 
                  remark #15451: unmasked unaligned unit stride stores: 1 
                  remark #15475: --- begin vector loop cost summary ---
                  remark #15476: scalar loop cost: 17 
                  remark #15477: vector loop cost: 3.000 
                  remark #15478: estimated potential speedup: 5.330 
                  remark #15488: --- end vector loop cost summary ---
                  remark #25015: Estimate of max trip count of loop=16
               LOOP END
            LOOP END
         LOOP END

         LOOP BEGIN at jacobi-2d-imper_8192_32x32_malloc_pluto.c(161,9)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization
            remark #15346: vector dependence: assumed FLOW dependence between b line 164 and b line 165
            remark #15346: vector dependence: assumed ANTI dependence between b line 165 and b line 164

            LOOP BEGIN at jacobi-2d-imper_8192_32x32_malloc_pluto.c(162,11)
               remark #15344: loop was not vectorized: vector dependence prevents vectorization
               remark #15346: vector dependence: assumed FLOW dependence between b line 164 and b line 165
               remark #15346: vector dependence: assumed ANTI dependence between b line 165 and b line 164
               remark #25015: Estimate of max trip count of loop=32

               LOOP BEGIN at jacobi-2d-imper_8192_32x32_malloc_pluto.c(163,13)
                  remark #15344: loop was not vectorized: vector dependence prevents vectorization
                  remark #15346: vector dependence: assumed FLOW dependence between b line 164 and b line 165
                  remark #15346: vector dependence: assumed ANTI dependence between b line 165 and b line 164
               LOOP END
            LOOP END
         LOOP END

         LOOP BEGIN at jacobi-2d-imper_8192_32x32_malloc_pluto.c(170,86)
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at jacobi-2d-imper_8192_32x32_malloc_pluto.c(171,13)
            <Peeled loop for vectorization>
            LOOP END

            LOOP BEGIN at jacobi-2d-imper_8192_32x32_malloc_pluto.c(171,13)
               remark #15388: vectorization support: reference b has aligned access   [ jacobi-2d-imper_8192_32x32_malloc_pluto.c(172,15) ]
               remark #15389: vectorization support: reference a has unaligned access   [ jacobi-2d-imper_8192_32x32_malloc_pluto.c(172,15) ]
               remark #15389: vectorization support: reference a has unaligned access   [ jacobi-2d-imper_8192_32x32_malloc_pluto.c(172,15) ]
               remark #15389: vectorization support: reference a has unaligned access   [ jacobi-2d-imper_8192_32x32_malloc_pluto.c(172,15) ]
               remark #15389: vectorization support: reference a has unaligned access   [ jacobi-2d-imper_8192_32x32_malloc_pluto.c(172,15) ]
               remark #15389: vectorization support: reference a has unaligned access   [ jacobi-2d-imper_8192_32x32_malloc_pluto.c(172,15) ]
               remark #15381: vectorization support: unaligned access used inside loop body
               remark #15305: vectorization support: vector length 2
               remark #15399: vectorization support: unroll factor set to 4
               remark #15309: vectorization support: normalized vectorization overhead 0.474
               remark #15300: LOOP WAS VECTORIZED
               remark #15442: entire loop may be executed in remainder
               remark #15449: unmasked aligned unit stride stores: 1 
               remark #15450: unmasked unaligned unit stride loads: 5 
               remark #15475: --- begin vector loop cost summary ---
               remark #15476: scalar loop cost: 53 
               remark #15477: vector loop cost: 9.500 
               remark #15478: estimated potential speedup: 5.560 
               remark #15488: --- end vector loop cost summary ---
               remark #25015: Estimate of max trip count of loop=1023
            LOOP END

            LOOP BEGIN at jacobi-2d-imper_8192_32x32_malloc_pluto.c(171,13)
            <Remainder loop for vectorization>
               remark #15389: vectorization support: reference b has unaligned access   [ jacobi-2d-imper_8192_32x32_malloc_pluto.c(172,15) ]
               remark #15389: vectorization support: reference a has unaligned access   [ jacobi-2d-imper_8192_32x32_malloc_pluto.c(172,15) ]
               remark #15389: vectorization support: reference a has unaligned access   [ jacobi-2d-imper_8192_32x32_malloc_pluto.c(172,15) ]
               remark #15389: vectorization support: reference a has unaligned access   [ jacobi-2d-imper_8192_32x32_malloc_pluto.c(172,15) ]
               remark #15389: vectorization support: reference a has unaligned access   [ jacobi-2d-imper_8192_32x32_malloc_pluto.c(172,15) ]
               remark #15389: vectorization support: reference a has unaligned access   [ jacobi-2d-imper_8192_32x32_malloc_pluto.c(172,15) ]
               remark #15381: vectorization support: unaligned access used inside loop body
               remark #15305: vectorization support: vector length 2
               remark #15309: vectorization support: normalized vectorization overhead 0.848
               remark #15301: REMAINDER LOOP WAS VECTORIZED
            LOOP END

            LOOP BEGIN at jacobi-2d-imper_8192_32x32_malloc_pluto.c(171,13)
            <Remainder loop for vectorization>
            LOOP END

            LOOP BEGIN at jacobi-2d-imper_8192_32x32_malloc_pluto.c(174,13)
               remark #15344: loop was not vectorized: vector dependence prevents vectorization
               remark #15346: vector dependence: assumed FLOW dependence between b line 175 and b line 180
               remark #15346: vector dependence: assumed ANTI dependence between b line 180 and b line 175
               remark #25015: Estimate of max trip count of loop=8188

               LOOP BEGIN at jacobi-2d-imper_8192_32x32_malloc_pluto.c(176,15)
                  remark #15344: loop was not vectorized: vector dependence prevents vectorization
                  remark #15346: vector dependence: assumed FLOW dependence between b line 177 and b line 178
                  remark #15346: vector dependence: assumed ANTI dependence between b line 178 and b line 177
               LOOP END
            LOOP END

            LOOP BEGIN at jacobi-2d-imper_8192_32x32_malloc_pluto.c(182,13)
               remark #25401: memcopy(with guard) generated
               remark #15542: loop was not vectorized: inner loop was already vectorized

               LOOP BEGIN at jacobi-2d-imper_8192_32x32_malloc_pluto.c(182,13)
               <Peeled loop for vectorization, Multiversioned v2>
               LOOP END

               LOOP BEGIN at jacobi-2d-imper_8192_32x32_malloc_pluto.c(182,13)
               <Multiversioned v2>
                  remark #15388: vectorization support: reference a has aligned access   [ jacobi-2d-imper_8192_32x32_malloc_pluto.c(183,15) ]
                  remark #15389: vectorization support: reference b has unaligned access   [ jacobi-2d-imper_8192_32x32_malloc_pluto.c(183,15) ]
                  remark #15381: vectorization support: unaligned access used inside loop body
                  remark #15305: vectorization support: vector length 2
                  remark #15309: vectorization support: normalized vectorization overhead 5.750
                  remark #15300: LOOP WAS VECTORIZED
                  remark #15442: entire loop may be executed in remainder
                  remark #15449: unmasked aligned unit stride stores: 1 
                  remark #15450: unmasked unaligned unit stride loads: 1 
                  remark #15475: --- begin vector loop cost summary ---
                  remark #15476: scalar loop cost: 17 
                  remark #15477: vector loop cost: 2.000 
                  remark #15478: estimated potential speedup: 8.480 
                  remark #15488: --- end vector loop cost summary ---
                  remark #25015: Estimate of max trip count of loop=4094
               LOOP END

               LOOP BEGIN at jacobi-2d-imper_8192_32x32_malloc_pluto.c(182,13)
               <Remainder loop for vectorization, Multiversioned v2>
               LOOP END
            LOOP END
         LOOP END

         LOOP BEGIN at jacobi-2d-imper_8192_32x32_malloc_pluto.c(188,11)
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at jacobi-2d-imper_8192_32x32_malloc_pluto.c(189,13)
            <Peeled loop for vectorization>
            LOOP END

            LOOP BEGIN at jacobi-2d-imper_8192_32x32_malloc_pluto.c(189,13)
               remark #15388: vectorization support: reference b has aligned access   [ jacobi-2d-imper_8192_32x32_malloc_pluto.c(190,15) ]
               remark #15389: vectorization support: reference a has unaligned access   [ jacobi-2d-imper_8192_32x32_malloc_pluto.c(190,15) ]
               remark #15389: vectorization support: reference a has unaligned access   [ jacobi-2d-imper_8192_32x32_malloc_pluto.c(190,15) ]
               remark #15389: vectorization support: reference a has unaligned access   [ jacobi-2d-imper_8192_32x32_malloc_pluto.c(190,15) ]
               remark #15389: vectorization support: reference a has unaligned access   [ jacobi-2d-imper_8192_32x32_malloc_pluto.c(190,15) ]
               remark #15389: vectorization support: reference a has unaligned access   [ jacobi-2d-imper_8192_32x32_malloc_pluto.c(190,15) ]
               remark #15381: vectorization support: unaligned access used inside loop body
               remark #15305: vectorization support: vector length 2
               remark #15399: vectorization support: unroll factor set to 4
               remark #15309: vectorization support: normalized vectorization overhead 0.474
               remark #15300: LOOP WAS VECTORIZED
               remark #15442: entire loop may be executed in remainder
               remark #15449: unmasked aligned unit stride stores: 1 
               remark #15450: unmasked unaligned unit stride loads: 5 
               remark #15475: --- begin vector loop cost summary ---
               remark #15476: scalar loop cost: 53 
               remark #15477: vector loop cost: 9.500 
               remark #15478: estimated potential speedup: 5.190 
               remark #15488: --- end vector loop cost summary ---
            LOOP END

            LOOP BEGIN at jacobi-2d-imper_8192_32x32_malloc_pluto.c(189,13)
            <Remainder loop for vectorization>
               remark #15389: vectorization support: reference b has unaligned access   [ jacobi-2d-imper_8192_32x32_malloc_pluto.c(190,15) ]
               remark #15389: vectorization support: reference a has unaligned access   [ jacobi-2d-imper_8192_32x32_malloc_pluto.c(190,15) ]
               remark #15389: vectorization support: reference a has unaligned access   [ jacobi-2d-imper_8192_32x32_malloc_pluto.c(190,15) ]
               remark #15389: vectorization support: reference a has unaligned access   [ jacobi-2d-imper_8192_32x32_malloc_pluto.c(190,15) ]
               remark #15389: vectorization support: reference a has unaligned access   [ jacobi-2d-imper_8192_32x32_malloc_pluto.c(190,15) ]
               remark #15389: vectorization support: reference a has unaligned access   [ jacobi-2d-imper_8192_32x32_malloc_pluto.c(190,15) ]
               remark #15381: vectorization support: unaligned access used inside loop body
               remark #15305: vectorization support: vector length 2
               remark #15309: vectorization support: normalized vectorization overhead 0.848
               remark #15301: REMAINDER LOOP WAS VECTORIZED
            LOOP END

            LOOP BEGIN at jacobi-2d-imper_8192_32x32_malloc_pluto.c(189,13)
            <Remainder loop for vectorization>
            LOOP END

            LOOP BEGIN at jacobi-2d-imper_8192_32x32_malloc_pluto.c(192,13)
               remark #15344: loop was not vectorized: vector dependence prevents vectorization
               remark #15346: vector dependence: assumed FLOW dependence between b line 193 and b line 196
               remark #15346: vector dependence: assumed ANTI dependence between b line 196 and b line 193

               LOOP BEGIN at jacobi-2d-imper_8192_32x32_malloc_pluto.c(194,15)
                  remark #15344: loop was not vectorized: vector dependence prevents vectorization
                  remark #15346: vector dependence: assumed FLOW dependence between b line 195 and b line 196
                  remark #15346: vector dependence: assumed ANTI dependence between b line 196 and b line 195
               LOOP END
            LOOP END
         LOOP END

         LOOP BEGIN at jacobi-2d-imper_8192_32x32_malloc_pluto.c(201,135)
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at jacobi-2d-imper_8192_32x32_malloc_pluto.c(202,11)
            <Peeled loop for vectorization>
            LOOP END

            LOOP BEGIN at jacobi-2d-imper_8192_32x32_malloc_pluto.c(202,11)
               remark #15388: vectorization support: reference b has aligned access   [ jacobi-2d-imper_8192_32x32_malloc_pluto.c(203,13) ]
               remark #15389: vectorization support: reference a has unaligned access   [ jacobi-2d-imper_8192_32x32_malloc_pluto.c(203,13) ]
               remark #15389: vectorization support: reference a has unaligned access   [ jacobi-2d-imper_8192_32x32_malloc_pluto.c(203,13) ]
               remark #15389: vectorization support: reference a has unaligned access   [ jacobi-2d-imper_8192_32x32_malloc_pluto.c(203,13) ]
               remark #15389: vectorization support: reference a has unaligned access   [ jacobi-2d-imper_8192_32x32_malloc_pluto.c(203,13) ]
               remark #15389: vectorization support: reference a has unaligned access   [ jacobi-2d-imper_8192_32x32_malloc_pluto.c(203,13) ]
               remark #15381: vectorization support: unaligned access used inside loop body
               remark #15305: vectorization support: vector length 2
               remark #15399: vectorization support: unroll factor set to 4
               remark #15309: vectorization support: normalized vectorization overhead 0.474
               remark #15300: LOOP WAS VECTORIZED
               remark #15442: entire loop may be executed in remainder
               remark #15449: unmasked aligned unit stride stores: 1 
               remark #15450: unmasked unaligned unit stride loads: 5 
               remark #15475: --- begin vector loop cost summary ---
               remark #15476: scalar loop cost: 53 
               remark #15477: vector loop cost: 9.500 
               remark #15478: estimated potential speedup: 5.190 
               remark #15488: --- end vector loop cost summary ---
            LOOP END

            LOOP BEGIN at jacobi-2d-imper_8192_32x32_malloc_pluto.c(202,11)
            <Remainder loop for vectorization>
               remark #15389: vectorization support: reference b has unaligned access   [ jacobi-2d-imper_8192_32x32_malloc_pluto.c(203,13) ]
               remark #15389: vectorization support: reference a has unaligned access   [ jacobi-2d-imper_8192_32x32_malloc_pluto.c(203,13) ]
               remark #15389: vectorization support: reference a has unaligned access   [ jacobi-2d-imper_8192_32x32_malloc_pluto.c(203,13) ]
               remark #15389: vectorization support: reference a has unaligned access   [ jacobi-2d-imper_8192_32x32_malloc_pluto.c(203,13) ]
               remark #15389: vectorization support: reference a has unaligned access   [ jacobi-2d-imper_8192_32x32_malloc_pluto.c(203,13) ]
               remark #15389: vectorization support: reference a has unaligned access   [ jacobi-2d-imper_8192_32x32_malloc_pluto.c(203,13) ]
               remark #15381: vectorization support: unaligned access used inside loop body
               remark #15305: vectorization support: vector length 2
               remark #15309: vectorization support: normalized vectorization overhead 0.848
               remark #15301: REMAINDER LOOP WAS VECTORIZED
            LOOP END

            LOOP BEGIN at jacobi-2d-imper_8192_32x32_malloc_pluto.c(202,11)
            <Remainder loop for vectorization>
            LOOP END

            LOOP BEGIN at jacobi-2d-imper_8192_32x32_malloc_pluto.c(205,11)
               remark #15344: loop was not vectorized: vector dependence prevents vectorization
               remark #15346: vector dependence: assumed FLOW dependence between b line 207 and b line 210
               remark #15346: vector dependence: assumed ANTI dependence between b line 210 and b line 207

               LOOP BEGIN at jacobi-2d-imper_8192_32x32_malloc_pluto.c(206,13)
                  remark #15344: loop was not vectorized: vector dependence prevents vectorization
                  remark #15346: vector dependence: assumed FLOW dependence between b line 207 and b line 208
                  remark #15346: vector dependence: assumed ANTI dependence between b line 208 and b line 207
               LOOP END
            LOOP END
         LOOP END

         LOOP BEGIN at jacobi-2d-imper_8192_32x32_malloc_pluto.c(213,9)
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at jacobi-2d-imper_8192_32x32_malloc_pluto.c(214,11)
               remark #15389: vectorization support: reference b has unaligned access   [ jacobi-2d-imper_8192_32x32_malloc_pluto.c(215,13) ]
               remark #15389: vectorization support: reference a has unaligned access   [ jacobi-2d-imper_8192_32x32_malloc_pluto.c(215,13) ]
               remark #15389: vectorization support: reference a has unaligned access   [ jacobi-2d-imper_8192_32x32_malloc_pluto.c(215,13) ]
               remark #15389: vectorization support: reference a has unaligned access   [ jacobi-2d-imper_8192_32x32_malloc_pluto.c(215,13) ]
               remark #15389: vectorization support: reference a has unaligned access   [ jacobi-2d-imper_8192_32x32_malloc_pluto.c(215,13) ]
               remark #15389: vectorization support: reference a has unaligned access   [ jacobi-2d-imper_8192_32x32_malloc_pluto.c(215,13) ]
               remark #15381: vectorization support: unaligned access used inside loop body
               remark #15305: vectorization support: vector length 2
               remark #15399: vectorization support: unroll factor set to 4
               remark #15309: vectorization support: normalized vectorization overhead 0.214
               remark #15300: LOOP WAS VECTORIZED
               remark #15450: unmasked unaligned unit stride loads: 5 
               remark #15451: unmasked unaligned unit stride stores: 1 
               remark #15475: --- begin vector loop cost summary ---
               remark #15476: scalar loop cost: 53 
               remark #15477: vector loop cost: 10.500 
               remark #15478: estimated potential speedup: 4.790 
               remark #15488: --- end vector loop cost summary ---
               remark #25015: Estimate of max trip count of loop=4
            LOOP END

            LOOP BEGIN at jacobi-2d-imper_8192_32x32_malloc_pluto.c(217,11)
               remark #15344: loop was not vectorized: vector dependence prevents vectorization
               remark #15346: vector dependence: assumed FLOW dependence between b line 219 and b line 220
               remark #15346: vector dependence: assumed ANTI dependence between b line 220 and b line 219

               LOOP BEGIN at jacobi-2d-imper_8192_32x32_malloc_pluto.c(218,13)
                  remark #15344: loop was not vectorized: vector dependence prevents vectorization
                  remark #15346: vector dependence: assumed FLOW dependence between b line 219 and b line 220
                  remark #15346: vector dependence: assumed ANTI dependence between b line 220 and b line 219
               LOOP END
            LOOP END
         LOOP END

         LOOP BEGIN at jacobi-2d-imper_8192_32x32_malloc_pluto.c(224,135)
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at jacobi-2d-imper_8192_32x32_malloc_pluto.c(225,11)
               remark #15344: loop was not vectorized: vector dependence prevents vectorization
               remark #15346: vector dependence: assumed FLOW dependence between b line 226 and b line 229
               remark #15346: vector dependence: assumed ANTI dependence between b line 229 and b line 226

               LOOP BEGIN at jacobi-2d-imper_8192_32x32_malloc_pluto.c(227,13)
                  remark #15344: loop was not vectorized: vector dependence prevents vectorization
                  remark #15346: vector dependence: assumed FLOW dependence between b line 228 and b line 229
                  remark #15346: vector dependence: assumed ANTI dependence between b line 229 and b line 228
               LOOP END
            LOOP END

            LOOP BEGIN at jacobi-2d-imper_8192_32x32_malloc_pluto.c(232,11)
               remark #25401: memcopy(with guard) generated
               remark #15542: loop was not vectorized: inner loop was already vectorized

               LOOP BEGIN at jacobi-2d-imper_8192_32x32_malloc_pluto.c(232,11)
               <Peeled loop for vectorization, Multiversioned v2>
               LOOP END

               LOOP BEGIN at jacobi-2d-imper_8192_32x32_malloc_pluto.c(232,11)
               <Multiversioned v2>
                  remark #15388: vectorization support: reference a has aligned access   [ jacobi-2d-imper_8192_32x32_malloc_pluto.c(233,13) ]
                  remark #15389: vectorization support: reference b has unaligned access   [ jacobi-2d-imper_8192_32x32_malloc_pluto.c(233,13) ]
                  remark #15381: vectorization support: unaligned access used inside loop body
                  remark #15305: vectorization support: vector length 2
                  remark #15309: vectorization support: normalized vectorization overhead 5.750
                  remark #15300: LOOP WAS VECTORIZED
                  remark #15442: entire loop may be executed in remainder
                  remark #15449: unmasked aligned unit stride stores: 1 
                  remark #15450: unmasked unaligned unit stride loads: 1 
                  remark #15475: --- begin vector loop cost summary ---
                  remark #15476: scalar loop cost: 17 
                  remark #15477: vector loop cost: 2.000 
                  remark #15478: estimated potential speedup: 7.810 
                  remark #15488: --- end vector loop cost summary ---
               LOOP END

               LOOP BEGIN at jacobi-2d-imper_8192_32x32_malloc_pluto.c(232,11)
               <Remainder loop for vectorization, Multiversioned v2>
               LOOP END
            LOOP END
         LOOP END

         LOOP BEGIN at jacobi-2d-imper_8192_32x32_malloc_pluto.c(236,9)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization
            remark #15346: vector dependence: assumed FLOW dependence between b line 238 and b line 241
            remark #15346: vector dependence: assumed ANTI dependence between b line 241 and b line 238

            LOOP BEGIN at jacobi-2d-imper_8192_32x32_malloc_pluto.c(237,11)
               remark #15344: loop was not vectorized: vector dependence prevents vectorization
               remark #15346: vector dependence: assumed FLOW dependence between b line 238 and b line 241
               remark #15346: vector dependence: assumed ANTI dependence between b line 241 and b line 238
               remark #25015: Estimate of max trip count of loop=32

               LOOP BEGIN at jacobi-2d-imper_8192_32x32_malloc_pluto.c(239,13)
                  remark #15344: loop was not vectorized: vector dependence prevents vectorization
                  remark #15346: vector dependence: assumed FLOW dependence between b line 240 and b line 241
                  remark #15346: vector dependence: assumed ANTI dependence between b line 241 and b line 240
               LOOP END
            LOOP END
         LOOP END
      LOOP END
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

jacobi-2d-imper_8192_32x32_malloc_pluto.c(137,15):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
jacobi-2d-imper_8192_32x32_malloc_pluto.c(137,15):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
jacobi-2d-imper_8192_32x32_malloc_pluto.c(137,15):remark #34026: call to memcpy implemented as a call to optimized library version
jacobi-2d-imper_8192_32x32_malloc_pluto.c(158,13):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to allow inline implementation
jacobi-2d-imper_8192_32x32_malloc_pluto.c(158,13):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
jacobi-2d-imper_8192_32x32_malloc_pluto.c(158,13):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
jacobi-2d-imper_8192_32x32_malloc_pluto.c(158,13):remark #34026: call to memcpy implemented as a call to optimized library version
jacobi-2d-imper_8192_32x32_malloc_pluto.c(183,15):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
jacobi-2d-imper_8192_32x32_malloc_pluto.c(183,15):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
jacobi-2d-imper_8192_32x32_malloc_pluto.c(183,15):remark #34026: call to memcpy implemented as a call to optimized library version
jacobi-2d-imper_8192_32x32_malloc_pluto.c(233,13):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
jacobi-2d-imper_8192_32x32_malloc_pluto.c(233,13):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
jacobi-2d-imper_8192_32x32_malloc_pluto.c(233,13):remark #34026: call to memcpy implemented as a call to optimized library version
===========================================================================
