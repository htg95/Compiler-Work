Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.


    Report from: Interprocedural optimizations [ipo]

  WHOLE PROGRAM (SAFE) [EITHER METHOD]: false
  WHOLE PROGRAM (SEEN) [TABLE METHOD]: true
  WHOLE PROGRAM (READ) [OBJECT READER METHOD]: false

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 0 (user-specified)
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000

In the inlining report below:
   "sz" refers to the "size" of the routine. The smaller a routine's size,
      the more likely it is to be inlined.
   "isz" refers to the "inlined size" of the routine. This is the amount
      the calling routine will grow if the called routine is inlined into it.
      The compiler generally limits the amount a routine can grow by having
      routines inlined into it.

Begin optimization report for: main()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (main()) [1/1=100.0%] mvt_8192_32x32_malloc_pluto_init_comment.c(65,1)
  -> EXTERN: (71,2) printf(const char *__restrict__, ...)
  -> EXTERN: (74,16) malloc(size_t)
  -> EXTERN: (75,16) memalign(size_t, size_t)
  -> EXTERN: (93,17) floor(double)
  -> EXTERN: (93,17) floor(double)
  -> EXTERN: (94,19) floor(double)
  -> EXTERN: (94,19) floor(double)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at mvt_8192_32x32_malloc_pluto_init_comment.c(76,2)
<Multiversioned v1>
   remark #25228: Loop multiversioned for Data Dependence
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between a line 78 and a line 78
   remark #15346: vector dependence: assumed ANTI dependence between a line 78 and a line 78
   remark #25438: unrolled without remainder by 2  
LOOP END

LOOP BEGIN at mvt_8192_32x32_malloc_pluto_init_comment.c(76,2)
<Multiversioned v2>
   remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
   remark #25438: unrolled without remainder by 2  
LOOP END

LOOP BEGIN at mvt_8192_32x32_malloc_pluto_init_comment.c(93,17)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mvt_8192_32x32_malloc_pluto_init_comment.c(94,19)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at mvt_8192_32x32_malloc_pluto_init_comment.c(95,7)
         remark #15542: loop was not vectorized: inner loop was already vectorized
         remark #25015: Estimate of max trip count of loop=279

         LOOP BEGIN at mvt_8192_32x32_malloc_pluto_init_comment.c(96,9)
            remark #15389: vectorization support: reference a has unaligned access   [ mvt_8192_32x32_malloc_pluto_init_comment.c(97,11) ]
            remark #15388: vectorization support: reference y_1 has aligned access   [ mvt_8192_32x32_malloc_pluto_init_comment.c(97,11) ]
            remark #15389: vectorization support: reference a has unaligned access   [ mvt_8192_32x32_malloc_pluto_init_comment.c(98,11) ]
            remark #15388: vectorization support: reference y_2 has aligned access   [ mvt_8192_32x32_malloc_pluto_init_comment.c(98,11) ]
            remark #15381: vectorization support: unaligned access used inside loop body
            remark #15305: vectorization support: vector length 2
            remark #15399: vectorization support: unroll factor set to 4
            remark #15309: vectorization support: normalized vectorization overhead 0.442
            remark #15300: LOOP WAS VECTORIZED
            remark #15448: unmasked aligned unit stride loads: 2 
            remark #15450: unmasked unaligned unit stride loads: 2 
            remark #15458: masked indexed (or gather) loads: 1 
            remark #15475: --- begin vector loop cost summary ---
            remark #15476: scalar loop cost: 27 
            remark #15477: vector loop cost: 13.000 
            remark #15478: estimated potential speedup: 2.040 
            remark #15488: --- end vector loop cost summary ---
            remark #25015: Estimate of max trip count of loop=34
         LOOP END

         LOOP BEGIN at mvt_8192_32x32_malloc_pluto_init_comment.c(96,9)
         <Remainder loop for vectorization>
            remark #15389: vectorization support: reference a has unaligned access   [ mvt_8192_32x32_malloc_pluto_init_comment.c(97,11) ]
            remark #15388: vectorization support: reference y_1 has aligned access   [ mvt_8192_32x32_malloc_pluto_init_comment.c(97,11) ]
            remark #15389: vectorization support: reference a has unaligned access   [ mvt_8192_32x32_malloc_pluto_init_comment.c(98,11) ]
            remark #15388: vectorization support: reference y_2 has aligned access   [ mvt_8192_32x32_malloc_pluto_init_comment.c(98,11) ]
            remark #15381: vectorization support: unaligned access used inside loop body
            remark #15305: vectorization support: vector length 2
            remark #15309: vectorization support: normalized vectorization overhead 1.647
            remark #15301: REMAINDER LOOP WAS VECTORIZED
            remark #25015: Estimate of max trip count of loop=136
         LOOP END

         LOOP BEGIN at mvt_8192_32x32_malloc_pluto_init_comment.c(96,9)
         <Remainder loop for vectorization>
            remark #25015: Estimate of max trip count of loop=273
         LOOP END
      LOOP END
   LOOP END
LOOP END
===========================================================================
