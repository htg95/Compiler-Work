Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.


    Report from: Interprocedural optimizations [ipo]

  WHOLE PROGRAM (SAFE) [EITHER METHOD]: false
  WHOLE PROGRAM (SEEN) [TABLE METHOD]: true
  WHOLE PROGRAM (READ) [OBJECT READER METHOD]: false

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 0 (user-specified)
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000

In the inlining report below:
   "sz" refers to the "size" of the routine. The smaller a routine's size,
      the more likely it is to be inlined.
   "isz" refers to the "inlined size" of the routine. This is the amount
      the calling routine will grow if the called routine is inlined into it.
      The compiler generally limits the amount a routine can grow by having
      routines inlined into it.

Begin optimization report for: main()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (main()) [1/1=100.0%] /home/mdl/hut95/Benchmarks_tiled_8x8/gemver_1024_8x8_malloc_pluto.c(52,1)
  -> EXTERN: (70,2) printf(const char *__restrict__, ...)
  -> EXTERN: (72,16) malloc(size_t)
  -> EXTERN: (73,16) memalign(size_t, size_t)
  -> EXTERN: (79,16) malloc(size_t)
  -> EXTERN: (80,16) memalign(size_t, size_t)
  -> EXTERN: (110,1) printf(const char *__restrict__, ...)
  -> EXTERN: (119,17) floor(double)
  -> EXTERN: (119,17) floor(double)
  -> EXTERN: (120,19) floor(double)
  -> EXTERN: (120,19) floor(double)
  -> EXTERN: (133,17) floor(double)
  -> EXTERN: (133,17) floor(double)
  -> EXTERN: (142,17) floor(double)
  -> EXTERN: (142,17) floor(double)
  -> EXTERN: (143,19) floor(double)
  -> EXTERN: (143,19) floor(double)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at /home/mdl/hut95/Benchmarks_tiled_8x8/gemver_1024_8x8_malloc_pluto.c(74,2)
<Multiversioned v1>
   remark #25228: Loop multiversioned for Data Dependence
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between A line 76 and A line 76
   remark #15346: vector dependence: assumed ANTI dependence between A line 76 and A line 76
   remark #25438: unrolled without remainder by 2  
LOOP END

LOOP BEGIN at /home/mdl/hut95/Benchmarks_tiled_8x8/gemver_1024_8x8_malloc_pluto.c(74,2)
<Multiversioned v2>
   remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
   remark #25438: unrolled without remainder by 2  
LOOP END

LOOP BEGIN at /home/mdl/hut95/Benchmarks_tiled_8x8/gemver_1024_8x8_malloc_pluto.c(81,2)
<Multiversioned v1>
   remark #25228: Loop multiversioned for Data Dependence
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between B line 83 and B line 83
   remark #15346: vector dependence: assumed ANTI dependence between B line 83 and B line 83
   remark #25438: unrolled without remainder by 2  
LOOP END

LOOP BEGIN at /home/mdl/hut95/Benchmarks_tiled_8x8/gemver_1024_8x8_malloc_pluto.c(81,2)
<Multiversioned v2>
   remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
   remark #25438: unrolled without remainder by 2  
LOOP END

LOOP BEGIN at /home/mdl/hut95/Benchmarks_tiled_8x8/gemver_1024_8x8_malloc_pluto.c(119,17)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /home/mdl/hut95/Benchmarks_tiled_8x8/gemver_1024_8x8_malloc_pluto.c(120,19)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at /home/mdl/hut95/Benchmarks_tiled_8x8/gemver_1024_8x8_malloc_pluto.c(121,7)
         remark #15542: loop was not vectorized: inner loop was already vectorized
         remark #25015: Estimate of max trip count of loop=1024

         LOOP BEGIN at /home/mdl/hut95/Benchmarks_tiled_8x8/gemver_1024_8x8_malloc_pluto.c(126,9)
            remark #15389: vectorization support: reference A has unaligned access   [ /home/mdl/hut95/Benchmarks_tiled_8x8/gemver_1024_8x8_malloc_pluto.c(127,11) ]
            remark #15389: vectorization support: reference A has unaligned access   [ /home/mdl/hut95/Benchmarks_tiled_8x8/gemver_1024_8x8_malloc_pluto.c(127,11) ]
            remark #15388: vectorization support: reference v1 has aligned access   [ /home/mdl/hut95/Benchmarks_tiled_8x8/gemver_1024_8x8_malloc_pluto.c(127,11) ]
            remark #15388: vectorization support: reference v2 has aligned access   [ /home/mdl/hut95/Benchmarks_tiled_8x8/gemver_1024_8x8_malloc_pluto.c(127,11) ]
            remark #15388: vectorization support: reference x has aligned access   [ /home/mdl/hut95/Benchmarks_tiled_8x8/gemver_1024_8x8_malloc_pluto.c(128,11) ]
            remark #15388: vectorization support: reference x has aligned access   [ /home/mdl/hut95/Benchmarks_tiled_8x8/gemver_1024_8x8_malloc_pluto.c(128,11) ]
            remark #15389: vectorization support: reference A has unaligned access   [ /home/mdl/hut95/Benchmarks_tiled_8x8/gemver_1024_8x8_malloc_pluto.c(128,11) ]
            remark #15381: vectorization support: unaligned access used inside loop body
            remark #15305: vectorization support: vector length 2
            remark #15399: vectorization support: unroll factor set to 4
            remark #15309: vectorization support: normalized vectorization overhead 0.150
            remark #15300: LOOP WAS VECTORIZED
            remark #15448: unmasked aligned unit stride loads: 3 
            remark #15449: unmasked aligned unit stride stores: 1 
            remark #15450: unmasked unaligned unit stride loads: 2 
            remark #15451: unmasked unaligned unit stride stores: 1 
            remark #15475: --- begin vector loop cost summary ---
            remark #15476: scalar loop cost: 36 
            remark #15477: vector loop cost: 12.500 
            remark #15478: estimated potential speedup: 2.870 
            remark #15488: --- end vector loop cost summary ---
            remark #25015: Estimate of max trip count of loop=128
         LOOP END

         LOOP BEGIN at /home/mdl/hut95/Benchmarks_tiled_8x8/gemver_1024_8x8_malloc_pluto.c(126,9)
         <Remainder loop for vectorization>
            remark #15389: vectorization support: reference A has unaligned access   [ /home/mdl/hut95/Benchmarks_tiled_8x8/gemver_1024_8x8_malloc_pluto.c(127,11) ]
            remark #15389: vectorization support: reference A has unaligned access   [ /home/mdl/hut95/Benchmarks_tiled_8x8/gemver_1024_8x8_malloc_pluto.c(127,11) ]
            remark #15388: vectorization support: reference v1 has aligned access   [ /home/mdl/hut95/Benchmarks_tiled_8x8/gemver_1024_8x8_malloc_pluto.c(127,11) ]
            remark #15388: vectorization support: reference v2 has aligned access   [ /home/mdl/hut95/Benchmarks_tiled_8x8/gemver_1024_8x8_malloc_pluto.c(127,11) ]
            remark #15388: vectorization support: reference x has aligned access   [ /home/mdl/hut95/Benchmarks_tiled_8x8/gemver_1024_8x8_malloc_pluto.c(128,11) ]
            remark #15388: vectorization support: reference x has aligned access   [ /home/mdl/hut95/Benchmarks_tiled_8x8/gemver_1024_8x8_malloc_pluto.c(128,11) ]
            remark #15389: vectorization support: reference A has unaligned access   [ /home/mdl/hut95/Benchmarks_tiled_8x8/gemver_1024_8x8_malloc_pluto.c(128,11) ]
            remark #15381: vectorization support: unaligned access used inside loop body
            remark #15305: vectorization support: vector length 2
            remark #15309: vectorization support: normalized vectorization overhead 0.641
            remark #15301: REMAINDER LOOP WAS VECTORIZED
            remark #25015: Estimate of max trip count of loop=512
         LOOP END

         LOOP BEGIN at /home/mdl/hut95/Benchmarks_tiled_8x8/gemver_1024_8x8_malloc_pluto.c(126,9)
         <Remainder loop for vectorization>
            remark #25015: Estimate of max trip count of loop=1024
         LOOP END
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at /home/mdl/hut95/Benchmarks_tiled_8x8/gemver_1024_8x8_malloc_pluto.c(133,17)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /home/mdl/hut95/Benchmarks_tiled_8x8/gemver_1024_8x8_malloc_pluto.c(138,5)
      remark #15388: vectorization support: reference x has aligned access   [ /home/mdl/hut95/Benchmarks_tiled_8x8/gemver_1024_8x8_malloc_pluto.c(139,7) ]
      remark #15388: vectorization support: reference x has aligned access   [ /home/mdl/hut95/Benchmarks_tiled_8x8/gemver_1024_8x8_malloc_pluto.c(139,7) ]
      remark #15388: vectorization support: reference z has aligned access   [ /home/mdl/hut95/Benchmarks_tiled_8x8/gemver_1024_8x8_malloc_pluto.c(139,7) ]
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 4
      remark #15300: LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 2 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 6 
      remark #15477: vector loop cost: 2.500 
      remark #15478: estimated potential speedup: 2.400 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=128
   LOOP END

   LOOP BEGIN at /home/mdl/hut95/Benchmarks_tiled_8x8/gemver_1024_8x8_malloc_pluto.c(138,5)
   <Remainder loop for vectorization>
      remark #15388: vectorization support: reference x has aligned access   [ /home/mdl/hut95/Benchmarks_tiled_8x8/gemver_1024_8x8_malloc_pluto.c(139,7) ]
      remark #15388: vectorization support: reference x has aligned access   [ /home/mdl/hut95/Benchmarks_tiled_8x8/gemver_1024_8x8_malloc_pluto.c(139,7) ]
      remark #15388: vectorization support: reference z has aligned access   [ /home/mdl/hut95/Benchmarks_tiled_8x8/gemver_1024_8x8_malloc_pluto.c(139,7) ]
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 0.909
      remark #25015: Estimate of max trip count of loop=1024
   LOOP END
LOOP END

LOOP BEGIN at /home/mdl/hut95/Benchmarks_tiled_8x8/gemver_1024_8x8_malloc_pluto.c(142,17)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at /home/mdl/hut95/Benchmarks_tiled_8x8/gemver_1024_8x8_malloc_pluto.c(143,19)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at /home/mdl/hut95/Benchmarks_tiled_8x8/gemver_1024_8x8_malloc_pluto.c(144,7)
         remark #15542: loop was not vectorized: inner loop was already vectorized
         remark #25015: Estimate of max trip count of loop=1024

         LOOP BEGIN at /home/mdl/hut95/Benchmarks_tiled_8x8/gemver_1024_8x8_malloc_pluto.c(145,9)
            remark #15389: vectorization support: reference A has unaligned access   [ /home/mdl/hut95/Benchmarks_tiled_8x8/gemver_1024_8x8_malloc_pluto.c(146,11) ]
            remark #15388: vectorization support: reference x has aligned access   [ /home/mdl/hut95/Benchmarks_tiled_8x8/gemver_1024_8x8_malloc_pluto.c(146,11) ]
            remark #15381: vectorization support: unaligned access used inside loop body
            remark #15305: vectorization support: vector length 2
            remark #15399: vectorization support: unroll factor set to 4
            remark #15309: vectorization support: normalized vectorization overhead 0.611
            remark #15300: LOOP WAS VECTORIZED
            remark #15448: unmasked aligned unit stride loads: 1 
            remark #15450: unmasked unaligned unit stride loads: 1 
            remark #15475: --- begin vector loop cost summary ---
            remark #15476: scalar loop cost: 13 
            remark #15477: vector loop cost: 4.500 
            remark #15478: estimated potential speedup: 2.870 
            remark #15488: --- end vector loop cost summary ---
            remark #25015: Estimate of max trip count of loop=128
         LOOP END

         LOOP BEGIN at /home/mdl/hut95/Benchmarks_tiled_8x8/gemver_1024_8x8_malloc_pluto.c(145,9)
         <Remainder loop for vectorization>
            remark #15389: vectorization support: reference A has unaligned access   [ /home/mdl/hut95/Benchmarks_tiled_8x8/gemver_1024_8x8_malloc_pluto.c(146,11) ]
            remark #15388: vectorization support: reference x has aligned access   [ /home/mdl/hut95/Benchmarks_tiled_8x8/gemver_1024_8x8_malloc_pluto.c(146,11) ]
            remark #15381: vectorization support: unaligned access used inside loop body
            remark #15305: vectorization support: vector length 2
            remark #15309: vectorization support: normalized vectorization overhead 2.462
            remark #15301: REMAINDER LOOP WAS VECTORIZED
            remark #25015: Estimate of max trip count of loop=512
         LOOP END

         LOOP BEGIN at /home/mdl/hut95/Benchmarks_tiled_8x8/gemver_1024_8x8_malloc_pluto.c(145,9)
         <Remainder loop for vectorization>
            remark #25015: Estimate of max trip count of loop=1024
         LOOP END
      LOOP END
   LOOP END
LOOP END
===========================================================================
